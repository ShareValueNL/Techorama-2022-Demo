@using SV.Techorama.Services.Interfaces
@using SV.Techorama.Models

@implements IDisposable

@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@foreach (var alert in _alerts)
{
    <div class="@CssClass(alert)">
        @* <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button> *@
        <a href="#" class="btn-close" @onclick="@(() => RemoveAlert(alert))" data-dismiss="alert" aria-label="close"></a>
        <span>@alert.Message</span>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; } = "default-alert";

    [Parameter]
    public bool Fade { get; set; } = true;

    private List<Models.Alert> _alerts = new();

    protected override void OnInitialized()
    {
        // subscribe to new alerts and location change events
        AlertService.OnAlert += OnAlert;
        NavigationManager.LocationChanged += OnLocationChange!;
    }

    public void Dispose()
    {
        // unsubscribe from alerts and location change events
        AlertService.OnAlert -= OnAlert;
        NavigationManager.LocationChanged -= OnLocationChange!;
    }

    private async void OnAlert(Models.Alert alert)
    {
        // ignore alerts sent to other alert components
        if (alert.Id != Id) 
            return;

        // clear alerts when an empty alert is received
        if (alert.Message == null) 
        {
            // remove alerts without the 'KeepAfterRouteChange' flag set to true
            _alerts.RemoveAll(x => !x.KeepAfterRouteChange);

            // set the 'KeepAfterRouteChange' flag to false for the 
            // remaining alerts so they are removed on the next clear
            _alerts.ForEach(x => x.KeepAfterRouteChange = false);
        }
        else
        {
            // add alert to array
            _alerts.Add(alert);
            StateHasChanged();

            // auto close alert if required
            if (alert.AutoClose)
            {
                await Task.Delay(5000);
                RemoveAlert(alert);
            }
        }

        StateHasChanged();
    }

    private void OnLocationChange(object sender, LocationChangedEventArgs e)
    {
        AlertService.Clear(Id);
    }

    private async void RemoveAlert(Models.Alert alert)
    {
        // check if already removed to prevent error on auto close
        if (!_alerts.Contains(alert)) return;

        if (Fade) 
        {
            // fade out alert
            alert.Fade = true;

            // remove alert after faded out
            await Task.Delay(250);
            _alerts.Remove(alert);
        } 
        else 
        {
            // remove alert
            _alerts.Remove(alert);
        }

        StateHasChanged();
    }

    private string? CssClass(Models.Alert? alert) 
    {
        if (alert == null) return null;

        var classes = new List<string> { "alert", "alert-dismissible", "mt-4", "w-100" };

        var alertTypeClass = new Dictionary<AlertType, string>
        {
            [AlertType.Success] = "alert-success",
            [AlertType.Error] = "alert-danger",
            [AlertType.Info] = "alert-info",
            [AlertType.Warning] = "alert-warning"
        };

        classes.Add(alertTypeClass[alert.Type]);

        if (alert.Fade)
            classes.Add("fade");

        return string.Join(' ', classes);
    }   
}